%{
#include <stdio.h>
#include <stdlib.h>
%}

%token NUMBER
%left '+' '-'
%left '*' '/'
%right '^'

%%
input:
    | input line
    ;

line:
    expr '\n'    { printf("Postfix: %s\n", $1); free($1); }
    ;

expr:
    expr '+' expr   { $$ = merge($1, $3, "+"); }
  | expr '-' expr   { $$ = merge($1, $3, "-"); }
  | expr '*' expr   { $$ = merge($1, $3, "*"); }
  | expr '/' expr   { $$ = merge($1, $3, "/"); }
  | expr '^' expr   { $$ = merge($1, $3, "^"); }
  | '(' expr ')'    { $$ = $2; }
  | NUMBER          {
                      char buf[32];
                      sprintf(buf, "%d", $1);
                      $$ = strdup(buf);
                    }
  ;

%%

char* merge(char* left, char* right, const char* op) {
    char* result = malloc(strlen(left) + strlen(right) + strlen(op) + 4);
    sprintf(result, "%s %s %s", left, right, op);
    free(left);
    free(right);
    return result;
}

int main() {
    printf("Enter infix expressions (Ctrl+D to quit):\n");
    yyparse();
    return 0;
}

int yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 0;
}
